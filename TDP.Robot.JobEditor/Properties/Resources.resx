<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TxtValueBetween" xml:space="preserve">
    <value>Value between</value>
  </data>
  <data name="TxtPluginsNotLoadedCorrectly" xml:space="preserve">
    <value>One ore more plugins were not loaded correctly</value>
  </data>
  <data name="TxtFolder" xml:space="preserve">
    <value>Folder</value>
  </data>
  <data name="TxtValueEqualsTo" xml:space="preserve">
    <value>Value equals to</value>
  </data>
  <data name="TxtPaste" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="TxtValueContains" xml:space="preserve">
    <value>Value contains</value>
  </data>
  <data name="TxtDoYouReallyWantToCloseApplication" xml:space="preserve">
    <value>Do you really want to close the application?</value>
  </data>
  <data name="TxtObject" xml:space="preserve">
    <value>Object</value>
  </data>
  <data name="TxtObjectExecutes" xml:space="preserve">
    <value>Object executes</value>
  </data>
  <data name="TxtRoot" xml:space="preserve">
    <value>Root</value>
  </data>
  <data name="TxtThereAreSomeErrors" xml:space="preserve">
    <value>There are some errors, cannot save the configuration.</value>
  </data>
  <data name="TxtApplicationName" xml:space="preserve">
    <value>The Dummy Programmer Robot</value>
  </data>
  <data name="TxtCannotCutAndPasteSameFolder" xml:space="preserve">
    <value>Cannot cut and paste objects in the same folder.</value>
  </data>
  <data name="TxtYouMustEnterAName" xml:space="preserve">
    <value>You must enter a name</value>
  </data>
  <data name="TxtValueGreaterThan" xml:space="preserve">
    <value>Value greater than</value>
  </data>
  <data name="TxtFieldCannotBeEmpty" xml:space="preserve">
    <value>This field cannot be empty</value>
  </data>
  <data name="TxtTheDummyProgrammerRobot" xml:space="preserve">
    <value>The Dummy Programmer Robot</value>
  </data>
  <data name="TxtYouMustEnterAnExecCondition" xml:space="preserve">
    <value>You must enter an execution condition</value>
  </data>
  <data name="TxtMaxValue" xml:space="preserve">
    <value>Max value</value>
  </data>
  <data name="TxtValue" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="TxtProperties" xml:space="preserve">
    <value>Properties...</value>
  </data>
  <data name="TxtValueLessThan" xml:space="preserve">
    <value>Value less than</value>
  </data>
  <data name="TxtMinValue" xml:space="preserve">
    <value>Min value</value>
  </data>
  <data name="TxtErrorWhileOpeningLogFile" xml:space="preserve">
    <value>An error occurred while opening the log file</value>
  </data>
  <data name="TxtErrorWhileClearingLogs" xml:space="preserve">
    <value>An error occurred while clearing log files</value>
  </data>
  <data name="TxtCopy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="TxtYouMustSelectItem" xml:space="preserve">
    <value>You must select an item.</value>
  </data>
  <data name="TxtDataNotLoadedCorrectly" xml:space="preserve">
    <value>Jobs data not loaded correctly</value>
  </data>
  <data name="TxtCreateFolder" xml:space="preserve">
    <value>Create folder</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="IcoFolder" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Icons\Folder.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TxtCut" xml:space="preserve">
    <value>Cut</value>
  </data>
  <data name="TxtMustBeANumberBetweenXAndY" xml:space="preserve">
    <value>Must be a number between "{0}" and "{1}"</value>
  </data>
  <data name="TxtWorkspace" xml:space="preserve">
    <value>Workspace</value>
  </data>
  <data name="TxtDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="TxtFieldNotContainAValidInteger" xml:space="preserve">
    <value>This field doesn't contain a valid integer</value>
  </data>
  <data name="TxtThisFieldCannotBeGreaterThanField" xml:space="preserve">
    <value>This field cannot be greater than field "{0}"</value>
  </data>
  <data name="TxtRename" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="TxtDeleteSelectedItems" xml:space="preserve">
    <value>Delete selected items?</value>
  </data>
  <data name="TxtValueStartsWith" xml:space="preserve">
    <value>Value starts with</value>
  </data>
  <data name="TxtWorkspaceRoot" xml:space="preserve">
    <value>Workspace root</value>
  </data>
  <data name="TxtValueEndsWith" xml:space="preserve">
    <value>Value ends with</value>
  </data>
  <data name="TxtObjectDontExecute" xml:space="preserve">
    <value>Object don't execute</value>
  </data>
  <data name="TDPRobot" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Icons\TDPRobot.ico;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TxtAnErrorOccurredWhileSaving" xml:space="preserve">
    <value>An error occurred while saving</value>
  </data>
  <data name="TxtDynamicDataBetween" xml:space="preserve">
    <value>Object {0}, dynamic data {1} between {2} and {3}</value>
  </data>
  <data name="TxtDynamicDataContains" xml:space="preserve">
    <value>Object {0}, dynamic data {1} contains {2}</value>
  </data>
  <data name="TxtDynamicDataEndsWith" xml:space="preserve">
    <value>Object {0}, dynamic data {1} ends with {2}</value>
  </data>
  <data name="TxtDynamicDataEquals" xml:space="preserve">
    <value>Object {0}, dynamic data {1} equals {2}</value>
  </data>
  <data name="TxtDynamicDataGreaterThan" xml:space="preserve">
    <value>Object {0}, dynamic data {1} greater than {2}</value>
  </data>
  <data name="TxtDynamicDataLessThan" xml:space="preserve">
    <value>Object {0}, dynamic data {1} less than {2}</value>
  </data>
  <data name="TxtDynamicDataStartsWith" xml:space="preserve">
    <value>Object {0}, dynamic data {1} starts with {2}</value>
  </data>
  <data name="TxtExecCondObjectDoesNotExecute" xml:space="preserve">
    <value>Object {0} ({1}) doesn't execute</value>
  </data>
  <data name="TxtExecCondObjectExecutes" xml:space="preserve">
    <value>Object {0} ({1}) executes</value>
  </data>
  <data name="TxtObjectDoesNotExecute" xml:space="preserve">
    <value>Object {0} ({1}) doesn't execute</value>
  </data>
</root>